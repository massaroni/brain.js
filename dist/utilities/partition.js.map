{"version":3,"sources":["../../src/utilities/partition.js"],"names":["partition","array","partitions","partitionSize","stdSize","Math","floor","length","step","partitioned","from","p","push","slice","min","tailIdx"],"mappings":";;;;;kBAAwBA,S;AAAT,SAASA,SAAT,CAAmBC,KAAnB,EAA6D;AAAA,MAAnCC,UAAmC,uEAAtB,CAAsB;AAAA,MAAnBC,aAAmB,uEAAH,CAAG;;AAC1E,MAAMC,UAAUC,KAAKC,KAAL,CAAWL,MAAMM,MAAN,GAAeL,UAA1B,CAAhB;AACA,MAAIM,OAAOJ,OAAX;AACA,MAAID,iBAAiBC,OAArB,EAA8B;AAC5BD,oBAAgBC,OAAhB;AACD,GAFD,MAEO;AACLI,WAAQL,gBAAgBC,OAAxB;AACA,QAAIH,MAAMM,MAAN,GAAeL,UAAf,GAA4BE,OAAhC,EAAyC;AACvCI,cAAQ,CAAR;AACD;AACF;;AAED,MAAIC,cAAc,EAAlB;AACA,MAAIC,OAAO,CAAX;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,aAAa,CAAjC,EAAoCS,GAApC,EAAyC;AACvCF,gBAAYG,IAAZ,CAAiBX,MAAMY,KAAN,CAAYH,IAAZ,EAAkBL,KAAKS,GAAL,CAASb,MAAMM,MAAf,EAAuBG,OAAOP,aAA9B,CAAlB,CAAjB;AACAO,YAAQF,IAAR;AACD;AACD,MAAIO,UAAUV,KAAKS,GAAL,CAASb,MAAMM,MAAN,GAAeJ,aAAxB,EAAuCO,OAAOP,aAA9C,CAAd;AACAM,cAAYG,IAAZ,CAAiBX,MAAMY,KAAN,CAAYE,OAAZ,CAAjB;;AAEA,SAAON,WAAP;AACD","file":"partition.js","sourcesContent":["export default function partition(array, partitions = 1, partitionSize = 1) {\n  const stdSize = Math.floor(array.length / partitions);\n  let step = stdSize;\n  if (partitionSize <= stdSize) {\n    partitionSize = stdSize;\n  } else {\n    step = (partitionSize - stdSize);\n    if (array.length / partitions > stdSize) {\n      step += 1;\n    }\n  }\n  \n  let partitioned = [];\n  let from = 0;\n  for (let p = 0; p < partitions - 1; p++) {\n    partitioned.push(array.slice(from, Math.min(array.length, from + partitionSize)));\n    from += step;\n  }\n  let tailIdx = Math.min(array.length - partitionSize, from + partitionSize);\n  partitioned.push(array.slice(tailIdx));\n  \n  return partitioned;\n}"]}