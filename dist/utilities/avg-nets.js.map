{"version":3,"sources":["../../src/utilities/avg-nets.js"],"names":["avgNets","nets","length","jsons","map","net","toJSON","equalsShallow","json","sizes","Error","refNet","mLayers","layers","layerIdx","mLayer","neuronId","mNeuron","bias","weights","n","neuron","weightId","weight","push","merged","NeuralNetwork","fromJSON","arrays","len","a","i","item"],"mappings":"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","file":"avg-nets.js","sourcesContent":["import NeuralNetwork from '../neural-network';\n\n/**\n * Parameter averaging, supports NeuralNetwork and NeuralNetworkGPU.\n * @param  {...any} nets \n */\nexport default function avgNets(...nets) {\n  if (!nets || !nets.length) {\n    return;\n  }\n\n  if (nets.length === 1) {\n    return nets[0];\n  }\n\n  const jsons = nets.map(net => net.toJSON());\n\n  if (!equalsShallow(jsons.map(json => json.sizes))) {\n    throw new Error('Can\\'t merge: mismatching layer sizes.');\n  }\n\n  let refNet = jsons[0];\n  let mLayers = [refNet.layers[0]];\n  for (let layerIdx = 1; layerIdx < refNet.layers.length; layerIdx++) {\n    let mLayer = {};\n    for (let neuronId in refNet.layers[layerIdx]) {\n      let mNeuron = {\n        bias: 0,\n        weights: {}\n      };\n      \n      let n = 1;\n      for (let net of jsons) {\n        const neuron = net.layers[layerIdx][neuronId];\n        if (!neuron) {\n          throw new Error('Can\\'t merge: missing neuron [' + layerIdx + '][' + neuronId + ']');\n        }\n\n        mNeuron.bias += (neuron.bias - mNeuron.bias) / n;\n\n        for (let weightId in neuron.weights) {\n          const weight = mNeuron.weights[weightId] || 0;\n          mNeuron.weights[weightId] = weight + (neuron.weights[weightId] - weight) / n;\n        }\n\n        n++;\n      }\n\n      mLayer[neuronId] = mNeuron;\n    }\n\n    mLayers.push(mLayer);\n  }\n  \n  refNet.layers = mLayers;\n  const merged = new NeuralNetwork();\n  merged.fromJSON(refNet);\n  return merged;\n}\n\nfunction equalsShallow(...arrays) {\n  if (!!arrays && arrays.length) {\n    const len = arrays[0].length;\n    for (let a = 1; a < arrays.length; a++) {\n      if (arrays[a].length !== len) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < len; i++) {\n      const item = arrays[0][i];\n      for (let a = 1; a < arrays.length; a++) {\n        if (item !== arrays[a][i]) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}"]}